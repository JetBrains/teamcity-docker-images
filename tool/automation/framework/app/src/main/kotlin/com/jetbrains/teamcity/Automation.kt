/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.jetbrains.teamcity

import com.jetbrains.teamcity.common.MathUtils
import java.lang.IllegalArgumentException
import com.jetbrains.teamcity.common.constants.ValidationConstants
import com.jetbrains.teamcity.docker.DockerImage
import com.jetbrains.teamcity.docker.exceptions.DockerImageValidationException
import com.jetbrains.teamcity.docker.validation.ImageValidationUtils
import com.jetbrains.teamcity.docker.hub.data.DockerRegistryAccessor
import com.jetbrains.teamcity.teamcity.TeamCityUtils
import kotlinx.cli.*


/**
 * Subcommand for image validation. Will be consumed by ..
 * ... argument parser.
 */
@OptIn(ExperimentalCli::class)
class ValidateImage: Subcommand("validate", "Validate Docker Image") {
    private val imageNames by argument(ArgType.String, description = "Images").vararg()

    /**
     * Execute image validation option specified via CLI.
     */
    override fun execute() {
        if (imageNames.size > 2) {
            throw IllegalArgumentException("Too many image names")
        }

        // 1. Capture current image size
        // TODO: Implement configuration via property file and add default registry (DockerHub) address ...
        // ... to it.
        val registryAccessor = DockerRegistryAccessor("https://hub.docker.com/v2")
        val currentImage = DockerImage(imageNames[0])
        val size = registryAccessor.getSize(currentImage)
        TeamCityUtils.reportTeamCityStatistics("SIZE-${ImageValidationUtils.getImageStatisticsId(currentImage.toString())}", size)

            // 2. Get size of previous image
        val previousImage = if (imageNames.size > 1) DockerImage(imageNames[1]) else ImageValidationUtils.getPrevDockerImageId(currentImage)
        if (previousImage == null) {
            println("Unable to determine previous release of an image automatically: $currentImage")
            return
        }

        val previousImageSize = registryAccessor.getSize(previousImage)
        val percentageIncrease = MathUtils.getPercentageIncrease(size.toLong(), previousImageSize.toLong())

        // 3. Compare the sizes
        if (percentageIncrease > ValidationConstants.ALLOWED_IMAGE_SIZE_INCREASE_THRESHOLD_PERCENT) {
            throw DockerImageValidationException("Image $currentImage size compared to previous ($previousImage) " +
                    "suppresses ${ValidationConstants.ALLOWED_IMAGE_SIZE_INCREASE_THRESHOLD_PERCENT}% threshold.")
        }
    }
}

@OptIn(ExperimentalCli::class)
fun main(args: Array<String>) {

    val parser = ArgParser("automation")
    val imageValidation = ValidateImage()
    parser.subcommands(imageValidation)

    // Splitting arguments into a list as the "--args" options might be treated as a ...
    // ... single string in non-interactive terminals, thus the parsing could be done incorrectly. ...
    // ... "\\s" is used to also cover non-unicode whitespaces.
    val argsList: Array<String> = if (args.size > 1) args else args[0].split("\\s+".toRegex()).toTypedArray()
    parser.parse(argsList)
}
